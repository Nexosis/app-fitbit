@{
    ViewData["Title"] = "Activities";
}
@using Newtonsoft.Json
@model NexosisFitbit.ViewModels.ActivityViewModel

<div class="row">
    <div class="col-lg-12 pull-right">
        <div class="form-group">
            <div class="dropdown">
                <button class="btn btn-default dropdown-toggle" type="button" id="activities" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                    Select an Activity Metric
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" aria-labelledby="activities">
                    @foreach (var metric in Model.Metrics)
                    {
                        <li><a href="@Url.Action("Index", new{id=metric.Name})">@metric.DisplayName</a></li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-12">
        <div id="chart" >
            <svg style="height: 400px;width: 100%"><text x="100" y="100" font-family="sans-serif" font-size="10px" fill="red">If no chart, try refreshing the page</text></svg>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-12">
        <div class="alert alert-info" role="alert">
            <p>Last prediction status : @(Model.LastSession?.Status.ToString() ?? "Unknown")</p>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-3 pull-right">
        <form asp-controller="Activity" asp-action="Predict" method="post">
            <div class="form-group pull-right">
                
                <input type="submit" value="Predict" class="btn btn-default"/>
            </div>
        </form>
    </div>
</div>


@section scripts
{
    <script>
        var data = @Html.Raw(JsonConvert.SerializeObject(Model.Activity));
        var prediction = @Html.Raw(JsonConvert.SerializeObject(Model.Prediction));

        nv.addGraph(function() {
            var chart = nv.models.lineChart()
                    .margin({ left: 100 }) //Adjust chart margins to give the x-axis some breathing room.
                    .useInteractiveGuideline(true) //We want nice looking tooltips and a guideline!
                    .duration(350) //how fast do you want the lines to transition?
                    .showLegend(true) //Show the legend, allowing users to turn on/off line series.
                    .showYAxis(true) //Show the y-axis
                    .showXAxis(true) //Show the x-axis
                ;

            chart.xAxis //Chart x-axis settings
                .axisLabel('Day')
                .tickFormat(function(d) { return d3.time.format('%b %d %Y')(new Date(d * 1000)); });

            chart.yAxis //Chart y-axis settings
                .axisLabel('@Model.SelectedMetric')
                .tickFormat(d3.format('10.0f'));

            /* Done setting the chart up? Time to render it!*/
            var chartData = [
                {
                    values: data,
                    key: "@Model.SelectedMetric",
                    color: '#ff7f0e'
                },
                {
                    values: prediction,
                    key: "Predicted @Model.SelectedMetric",
                    color: '#2ca02c'
                }
            ];

            var chartSvg = d3.select('#chart svg');
            chartSvg.selectAll("*").remove(); //remove the text node warning of content problems.
            d3.select('#chart svg') //Select the <svg> element you want to render the chart in.   
                .datum(chartData) //Populate the <svg> element with chart data...
                .call(chart); //Finally, render the chart!

            //Update the chart when window resizes.
            nv.utils.windowResize(function() { chart.update() });
            return chart;
        });
        
        
    </script>
    
    
}

